SQL
ORM(Object Relational Mapping)
이라는 도구를 사용한다면 자바 문법으로 데이터베이스를 다룰 수 있다.
즉, ORM을 이용하면 개발자가 SQL을 작성하지 않더라도 데이터베이스의 데이터 처리가 가능하다.
- 데이터베이스의 테이블을 자바 클래스로 만들어서 관리할 수 있다.
ex)Student Entity
	String name;
	int age;       
	에서 Student Entity라는 클래스가 테이블이 되고 name, age가 각각의 행이 된다.
- Java의 데이터 클래스와 테이블 1:1 매칭
-----------------------------------------------------------------------------------------------------------
Question
id
subject
content

insert into question values(1,'안녕하세요','가입인사 드립니다');

Question q1 = new Question();
//데이터를 관리하는데 사용하는 ORM의 자바 클래스인 엔티티(Entity)라고 한다.

q1.setId(1);
q1.setSubject("안녕하세요")
q1.setContent("가입인사 드립니다");
this.questionRepository.save();
-----------------------------------------------------------------------------------------------------------

DBMS(DataBase Management System)
- 데이터베이스를 관리하는 소프트웨어

JPA(Java Persistance API)
- 스프링 부트는 JPA를 ORM의 기술표준으로 사용
- 인터페이스의 모음이므로 이 인터페이스를 구현하는 실제 클래스가 필요하다.
- 구현한 실제 클래스에는 대표적으로 하이버네이트(Hibernate)가 있다.

하이버네이트(Hibernate)
- JPA를 구현한 실제 클래스이자
자바의 ORM 프레임워크로 스프링부트에서 데이터베이스를 쉽게 도와주는 역할

spring.jpa.hibernate.ddl-auto
: 엔티티를 기준으로 데이터의 테이블을 생성하는 규칙을 설정
- none : 엔티티가 변경이 되더라도 데이터베이스를 변경하지 않겠다.
- update : 엔티티의 변경된 부분만 데이터베이스에 적용한다.(개발환경에서 주로 사용함)
- validate : 엔티티와 테이블간의 차이점이 있는지 검사만 한다.
- create : 스프링부트 서버를 시작할 때마다 테이블 삭제한 후 다시 생성
- create-drop : create와 동일하지만 서버를 종료할 때에도 테이블을 모두 삭제한다는 차이가 있다. 
